{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 function (pixelCount) \{\
  width = 8\
  //generate a 2d matrix in 3d space\
  //targets is an array of source coordinates 0 = fixed, 1 = row, 2 = column\
  //e.g. [1,2,0] will generate rows = x, cols = y, and z is fixed (at zero)\
  //sign indicates direction so -2 is columns in reverse order\
  //offsets lets you translate the coordinates by some offset\
  function side(targets, offsets) \{\
    var matrix = [], coords, row, col\
    for (i = 0; i < width * width; i++) \{\
      row = Math.floor(i / width)\
      col = i % width\
      // col = row % 2 == 1 ? width - 1 - col : col //zigzag\
      coords = [0, row, col]\
      matrix.push(targets.map(function (target, index) \{\
        var coord = coords[Math.abs(target)]\
        if (target < 0)\
          coord = width - 1 - coord\
        return coord + offsets[index]\
      \}))\
    \}\
    return matrix\
  \}\
\
  var map = []\
  var gap = .75\
  map = map.concat(side([2, 1, 0], [0, 0, width - 1 + gap]))\
  map = map.concat(side([0, 1, 2], [-gap, 0, 0]))\
  map = map.concat(side([1, 0, 2], [0, width - 1 + gap, 0]))\
  map = map.concat(side([0, -1, 2], [width - 1 + gap, 0, 0]))\
  map = map.concat(side([-1, 0, 2], [0, -gap, 0]))\
\
  // map = map.concat(side([-1,2,0], [0,0,-.75]))\
  return map\
\}}